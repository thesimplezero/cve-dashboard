import json
from collections import defaultdict

# Define labels and their default prompts
labels = {
    "k8s_namespace": "Enter Kubernetes namespace: ",
    "severity": "Enter severity (Critical/High/Medium/Low): ",
    "fix_state": "Enter fix state (fixed/unfixed): "
}

# Function to prompt for missing label values
def prompt_for_label(label):
    value = input(labels[label])
    return value

# Function to parse data and aggregate counts
def parse_data(data):
    counts = defaultdict(int)
    for item in data:
        # Ensure all required labels are present, prompt if not
        for label in labels:
            if label not in item or not item[label]:
                item[label] = prompt_for_label(label)
        
        # Create a key for aggregation
        key = (item['k8s_namespace'], item['severity'], item['fix_state'])
        counts[key] += 1
    return counts

# Main function to load data and process it
def main(json_file_path):
    try:
        with open(json_file_path, 'r') as file:
            data = json.load(file)['data']
            counts = parse_data(data)
            for key, count in counts.items():
                print(f"Namespace: {key[0]}, Severity: {key[1]}, Fix State: {key[2]} - Count: {count}")
    except Exception as e:
        print(f"Error processing file: {e}")

if __name__ == "__main__":
    json_file_path = input("Enter the path to your JSON file: ")
    main(json_file_path)
