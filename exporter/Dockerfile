# Use the official Go image from the Docker Hub. 
# The tag '1.22-alpine' refers to Go version 1.22 on Alpine Linux for a lightweight image.
FROM golang:1.22-alpine as builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Assuming go.mod and go.sum are directly in the exporter directory,
# Copy the go.mod and go.sum to download dependencies.
# Doing this before copying the rest of the code can help cache the dependencies layer.
COPY go.mod go.sum ./
RUN go mod download

# Now copy the rest of your service's source code into the container.
COPY . .

# Compile the application to the binary 'my_exporter'
# Note: The build context for this Dockerfile is set to the exporter directory by docker-compose,
# meaning './' references the contents of the exporter directory.
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o my_exporter .

# Start from a fresh alpine image to create a smaller final image
FROM alpine:latest  
RUN apk --no-cache add ca-certificates

# Set the working directory to root
WORKDIR /

# Copy the pre-built binary file from the previous stage
COPY --from=builder /app/my_exporter .

# Expose the port the exporter listens on
EXPOSE 9092

# Command to run the executable
ENTRYPOINT ["./my_exporter"]
