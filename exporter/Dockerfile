# Base image selection: Official Go image based on Alpine Linux, version 1.22.
FROM golang:1.22-alpine as builder

# Establishing the working directory within the container to /app.
WORKDIR /app

# Transfer go.mod and go.sum to leverage dependency caching.
COPY go.mod go.sum ./
RUN go mod download

# Transfer the application source code to the container.
COPY . .

# Compile the application, producing the executable 'my_exporter'.
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o my_exporter .

# Transition to a minimal Alpine image for the final build stage.
FROM alpine:latest  
RUN apk --no-cache add ca-certificates

# Setting the container's working directory to the root directory.
WORKDIR /

# Transfer the compiled binary from the builder stage.
COPY --from=builder /app/my_exporter .

# Transfer the data directory required by the application.
# Adjust this path if the application expects the data directory in a different location.
COPY --from=builder /app/data ./data

# Indicate the network port on which the exporter listens.
EXPOSE 9092

# Define the container's default executable.
ENTRYPOINT ["./my_exporter"]
