package main

import (
	"log"
	"net/http"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

var (
	// Define the Prometheus metrics with the same labels as in your dashboard
	vulnMetric = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "vuln_operator_cves",
		Help: "Number of CVE occurrences.",
	}, []string{"cve", "severity", "package", "version", "type", "fix_state", "image_id", "k8s_namespace", "k8s_name", "k8s_kind", "container_name"})

	auditedMetric = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "vuln_operator_cves_audit",
		Help: "Number of CVE occurrences already audited.",
	}, []string{"cve", "severity", "package", "version", "type", "fix_state", "image_id", "k8s_namespace", "k8s_name", "k8s_kind", "container_name"})
)

func simulateDataCollection() {
	// Simulate data for CVE occurrences
	vulnMetric.With(prometheus.Labels{
		"cve": "CVE-2021-1234", "severity": "High", "package": "example-package",
		"version": "1.0", "type": "library", "fix_state": "fixed", "image_id": "image123",
		"k8s_namespace": "default", "k8s_name": "example-pod", "k8s_kind": "Pod", 
		"container_name": "example-container",
	}).Set(1)

	// Simulate data for audited CVE occurrences
	auditedMetric.With(prometheus.Labels{
		"cve": "CVE-2021-2345", "severity": "Medium", "package": "another-package",
		"version": "2.0", "type": "binary", "fix_state": "wont-fix", "image_id": "image456",
		"k8s_namespace": "kube-system", "k8s_name": "another-pod", "k8s_kind": "Deployment", 
		"container_name": "another-container",
	}).Set(1)
}

// loggingHandler is a middleware that logs the HTTP requests
func loggingHandler(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Log each request method, URL, and remote address
		log.Printf("Received request %s %s from %s", r.Method, r.URL.Path, r.RemoteAddr)
		next.ServeHTTP(w, r)
	})
}

func main() {
	// Simulate collecting data and updating metrics.
	simulateDataCollection()

	// Expose the registered metrics via HTTP, wrapped with the loggingHandler for request logging.
	http.Handle("/metrics", loggingHandler(promhttp.Handler()))

	// Bind the server to 0.0.0.0 to make it accessible from other containers
	log.Println("Starting server on :9092")
	if err := http.ListenAndServe("0.0.0.0:9092", nil); err != nil {
		log.Fatalf("Error starting server: %s", err)
	}
}
