import json
from collections import defaultdict

# Define labels without k8s_namespace and their default prompts
labels = {
    "severity": "Enter severity (Critical/High/Medium/Low) for CVE {cve}: ",
    "fix_state": "Enter fix state (fixed/unfixed) for CVE {cve}: "
}

# Function to prompt for missing label values
def prompt_for_label(label, cve):
    value = input(labels[label].format(cve=cve))
    return value

# Function to parse data and aggregate counts
def parse_data(data):
    counts = defaultdict(int)
    for item in data:
        if 'k8s_namespace' not in item:
            print(f"Missing 'k8s_namespace' for CVE: {item.get('cve', 'Unknown')}")
            continue

        for label in labels:
            if label not in item or not item[label]:
                item[label] = prompt_for_label(label, item.get('cve', 'Unknown'))
        
        key = (item['k8s_namespace'], item['severity'], item['fix_state'])
        counts[key] += 1
    return counts

# Function to save the counts to a JSON file
def save_to_json(counts, filename="data.json"):
    # Convert defaultdict to a regular dict for JSON serialization
    data_to_save = {str(key): value for key, value in counts.items()}
    try:
        with open(filename, 'w') as file:
            json.dump(data_to_save, file, indent=4)
        print(f"Data saved to {filename}")
    except Exception as e:
        print(f"Error saving data to JSON: {e}")

# Main function to load data and process it
def main(json_file_path):
    try:
        with open(json_file_path, 'r') as file:
            data = json.load(file).get('data', [])
            counts = parse_data(data)
            for key, count in counts.items():
                print(f"Namespace: {key[0]}, Severity: {key[1]}, Fix State: {key[2]} - Count: {count}")
            
            # Save the aggregated data to data.json
            save_to_json(counts)
    except FileNotFoundError:
        print(f"File not found: {json_file_path}")
    except json.JSONDecodeError:
        print("Error decoding JSON from the file.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    json_file_path = input("Enter the path to your JSON file: ")
    main(json_file_path)
