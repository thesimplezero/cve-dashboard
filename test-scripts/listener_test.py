import http.server
import socketserver
import threading
import time
import logging

PORT = 9092
HOST = '172.17.0.1'  # Listen on all network interfaces
RUN_TIME = 65  # Run time in seconds to align with Prometheus scrape_interval

# Configure logging
logging.basicConfig(filename='listener_test.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class Handler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Log details about the request
        logging.info(f"Received GET request from {self.client_address[0]}")
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        response_message = "metrics: up\n"
        self.wfile.write(response_message.encode())
        print(f"Sent response to {self.client_address[0]}: {response_message.strip()}")

def run_server(server):
    logging.info(f"Serving on {HOST}:{PORT}")
    print(f"Serving on {HOST}:{PORT}")
    server.serve_forever()

def main():
    server = socketserver.TCPServer((HOST, PORT), Handler)
    
    # Start the HTTP server in a separate thread
    server_thread = threading.Thread(target=run_server, args=(server,))
    server_thread.daemon = True
    server_thread.start()

    logging.info(f"Server will run for {RUN_TIME} seconds to match Prometheus scrape interval...")
    print(f"Server will run for {RUN_TIME} seconds to match Prometheus scrape interval...")
    time.sleep(RUN_TIME)

    # Shut down the server
    logging.info("Shutting down server...")
    print("Shutting down server...")
    server.shutdown()
    server.server_close()

if __name__ == "__main__":
    main()
